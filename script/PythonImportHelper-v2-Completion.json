[
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Convolution2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "plot_model",
        "importPath": "keras.utils.vis_utils",
        "description": "keras.utils.vis_utils",
        "isExtraImport": true,
        "detail": "keras.utils.vis_utils",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "keras.preprocessing.image",
        "description": "keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier = Sequential()\nclassifier.add(Convolution2D(32, 3, 3, input_shape = (128, 128, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Convolution2D(16, 3, 3, activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Convolution2D(8, 3, 3, activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Flatten())\n#hidden layer\nclassifier.add(Dense(output_dim = 128, activation = 'relu'))",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.add(MaxPooling2D(pool_size",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Convolution2D(16, 3, 3, activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Convolution2D(8, 3, 3, activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Flatten())\n#hidden layer\nclassifier.add(Dense(output_dim = 128, activation = 'relu'))\nclassifier.add(Dropout(p = 0.5))\n#output layer",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.add(MaxPooling2D(pool_size",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Convolution2D(8, 3, 3, activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Flatten())\n#hidden layer\nclassifier.add(Dense(output_dim = 128, activation = 'relu'))\nclassifier.add(Dropout(p = 0.5))\n#output layer\nclassifier.add(Dense(output_dim = 10, activation = 'softmax'))\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.add(MaxPooling2D(pool_size",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Flatten())\n#hidden layer\nclassifier.add(Dense(output_dim = 128, activation = 'relu'))\nclassifier.add(Dropout(p = 0.5))\n#output layer\nclassifier.add(Dense(output_dim = 10, activation = 'softmax'))\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nprint(classifier.summary())\n#plot_model(classifier, show_shapes=True, to_file='PlantVillage_CNN.png')",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.add(Dense(output_dim",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.add(Dense(output_dim = 128, activation = 'relu'))\nclassifier.add(Dropout(p = 0.5))\n#output layer\nclassifier.add(Dense(output_dim = 10, activation = 'softmax'))\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nprint(classifier.summary())\n#plot_model(classifier, show_shapes=True, to_file='PlantVillage_CNN.png')\n#Part 2 - fitting the data set\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.add(Dropout(p",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.add(Dropout(p = 0.5))\n#output layer\nclassifier.add(Dense(output_dim = 10, activation = 'softmax'))\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nprint(classifier.summary())\n#plot_model(classifier, show_shapes=True, to_file='PlantVillage_CNN.png')\n#Part 2 - fitting the data set\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n        rescale=1./255,",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.add(Dense(output_dim",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.add(Dense(output_dim = 10, activation = 'softmax'))\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nprint(classifier.summary())\n#plot_model(classifier, show_shapes=True, to_file='PlantVillage_CNN.png')\n#Part 2 - fitting the data set\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n        rescale=1./255,\n        shear_range=0.2,\n        zoom_range=0.2,",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "classifier.compile(optimizer",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nprint(classifier.summary())\n#plot_model(classifier, show_shapes=True, to_file='PlantVillage_CNN.png')\n#Part 2 - fitting the data set\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n        rescale=1./255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "train_datagen",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "train_datagen = ImageDataGenerator(\n        rescale=1./255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntraining_set = train_datagen.flow_from_directory(\n        'train',\n        target_size=(128, 128),\n        batch_size=64,",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "test_datagen",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "test_datagen = ImageDataGenerator(rescale=1./255)\ntraining_set = train_datagen.flow_from_directory(\n        'train',\n        target_size=(128, 128),\n        batch_size=64,\n        class_mode='categorical' )\nlabel_map = (training_set.class_indices)\nprint(label_map)\ntest_set = test_datagen.flow_from_directory(\n        'val',",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "training_set",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "training_set = train_datagen.flow_from_directory(\n        'train',\n        target_size=(128, 128),\n        batch_size=64,\n        class_mode='categorical' )\nlabel_map = (training_set.class_indices)\nprint(label_map)\ntest_set = test_datagen.flow_from_directory(\n        'val',\n        target_size=(128, 128),",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "label_map",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "label_map = (training_set.class_indices)\nprint(label_map)\ntest_set = test_datagen.flow_from_directory(\n        'val',\n        target_size=(128, 128),\n        batch_size=64,\n        class_mode='categorical')\nclassifier.fit_generator(\n        training_set,\n        steps_per_epoch=20,",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "test_set",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.cnn_train-checkpoint",
        "description": ".ipynb_checkpoints.cnn_train-checkpoint",
        "peekOfCode": "test_set = test_datagen.flow_from_directory(\n        'val',\n        target_size=(128, 128),\n        batch_size=64,\n        class_mode='categorical')\nclassifier.fit_generator(\n        training_set,\n        steps_per_epoch=20,\n        epochs=10000,\n        validation_data=test_set,",
        "detail": ".ipynb_checkpoints.cnn_train-checkpoint",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(f'Path \"{location}\" does not exist!')\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to\n    setup the environment correctly.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.\n    # This can be kept until Python 3.9 or exe installers support is dropped.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "model_prediction",
        "kind": 2,
        "importPath": "aaap",
        "description": "aaap",
        "peekOfCode": "def model_prediction(test_image):\n    model = tf.keras.models.load_model(\"trained_plant_disease_model.keras\")\n    image = tf.keras.preprocessing.image.load_img(test_image,target_size=(128,128))\n    input_arr = tf.keras.preprocessing.image.img_to_array(image)\n    input_arr = np.array([input_arr]) \n    predictions = model.predict(input_arr)\n    return np.argmax(predictions) \nst.sidebar.title(\"Dashboard\")\napp_mode = st.sidebar.selectbox(\"Select Page\",[\"Home\",\"Disease Recognition\"])\nif(app_mode==\"Home\"):",
        "detail": "aaap",
        "documentation": {}
    },
    {
        "label": "app_mode",
        "kind": 5,
        "importPath": "aaap",
        "description": "aaap",
        "peekOfCode": "app_mode = st.sidebar.selectbox(\"Select Page\",[\"Home\",\"Disease Recognition\"])\nif(app_mode==\"Home\"):\n    st.header(\"PLANT DISEASE RECOGNITION SYSTEM\")\n    image_path = \"Background image\\images.jpeg\"\n    st.image(image_path, caption=\"Uploaded Image\", use_container_width=True)\n    st.markdown(\"\"\"\n    Welcome to the Plant Disease Recognition System! 🌿🔍\n    ### How It Works\n    1. **Upload Image:** Go to the **Disease Recognition** page and upload an image of a plant with suspected diseases.\n    2. **Analysis:** Our system will process the image using advanced algorithms to identify potential diseases.",
        "detail": "aaap",
        "documentation": {}
    },
    {
        "label": "model_prediction",
        "kind": 2,
        "importPath": "am",
        "description": "am",
        "peekOfCode": "def model_prediction(test_image):\n    model = tf.keras.models.load_model(\"trained_plant_disease_model.keras\")\n    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(128,128))\n    input_arr = tf.keras.preprocessing.image.img_to_array(image)\n    input_arr = np.array([input_arr]) \n    predictions = model.predict(input_arr)\n    return np.argmax(predictions) \nst.sidebar.title(\"Dashboard\")\napp_mode = st.sidebar.selectbox(\"Select Page\", [\"Home\", \"Disease Recognition\"])\nif(app_mode == \"Home\"):",
        "detail": "am",
        "documentation": {}
    },
    {
        "label": "app_mode",
        "kind": 5,
        "importPath": "am",
        "description": "am",
        "peekOfCode": "app_mode = st.sidebar.selectbox(\"Select Page\", [\"Home\", \"Disease Recognition\"])\nif(app_mode == \"Home\"):\n    st.header(\"PLANT DISEASE RECOGNITION SYSTEM\")\n    image_path = \"Background image\\images.jpeg\"\n    st.image(image_path, caption=\"Uploaded Image\", use_container_width=True)\n    st.markdown(\"\"\"\n    Welcome to the Plant Disease Recognition System! 🌿🔍\n    ### How It Works\n    1. **Upload Image:** Go to the **Disease Recognition** page and upload an image of a plant with suspected diseases.\n    2. **Analysis:** Our system will process the image using advanced algorithms to identify potential diseases.",
        "detail": "am",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "mm",
        "description": "mm",
        "peekOfCode": "def load_model():\n    return tf.keras.models.load_model(\"trained_plant_disease_model.keras\")\n# Preprocess the uploaded image\ndef preprocess_image(image_file):\n    image = tf.keras.preprocessing.image.load_img(image_file, target_size=(128, 128))\n    input_arr = tf.keras.preprocessing.image.img_to_array(image)  # Convert to array\n    input_arr = np.expand_dims(input_arr, axis=0)  # Expand dimensions for batch size\n    input_arr = input_arr / 255.0  # Normalize to [0, 1]\n    return input_arr\n# Perform prediction",
        "detail": "mm",
        "documentation": {}
    },
    {
        "label": "preprocess_image",
        "kind": 2,
        "importPath": "mm",
        "description": "mm",
        "peekOfCode": "def preprocess_image(image_file):\n    image = tf.keras.preprocessing.image.load_img(image_file, target_size=(128, 128))\n    input_arr = tf.keras.preprocessing.image.img_to_array(image)  # Convert to array\n    input_arr = np.expand_dims(input_arr, axis=0)  # Expand dimensions for batch size\n    input_arr = input_arr / 255.0  # Normalize to [0, 1]\n    return input_arr\n# Perform prediction\ndef model_prediction(test_image):\n    model = load_model()  # Load model dynamically to avoid issues with caching\n    processed_image = preprocess_image(test_image)",
        "detail": "mm",
        "documentation": {}
    },
    {
        "label": "model_prediction",
        "kind": 2,
        "importPath": "mm",
        "description": "mm",
        "peekOfCode": "def model_prediction(test_image):\n    model = load_model()  # Load model dynamically to avoid issues with caching\n    processed_image = preprocess_image(test_image)\n    predictions = model.predict(processed_image)  # Get prediction probabilities\n    return predictions\n# Define disease types (adjust names to match your model's output labels)\ndisease_types = [\n    \"Tomato__healthy\",\n    \"Tomato__Bacterial_spot\",\n    \"Tomato__Early_blight\",",
        "detail": "mm",
        "documentation": {}
    },
    {
        "label": "disease_types",
        "kind": 5,
        "importPath": "mm",
        "description": "mm",
        "peekOfCode": "disease_types = [\n    \"Tomato__healthy\",\n    \"Tomato__Bacterial_spot\",\n    \"Tomato__Early_blight\",\n    \"Tomato__Late_blight\",\n    \"Tomato__Leaf_Mold\",\n    \"Tomato__Septoria_leaf_spot\",\n    \"Tomato__Spider_mites\",\n    \"Tomato__Target_Spot\",\n    \"Tomato__Tomato_mosaic_virus\",",
        "detail": "mm",
        "documentation": {}
    },
    {
        "label": "image_name_mapping",
        "kind": 5,
        "importPath": "mm",
        "description": "mm",
        "peekOfCode": "image_name_mapping = {\n    \"Tomato__healthy\": \"Tomato___healthy_original\",\n    \"Tomato__Bacterial_spot\": \"Tomato___Bacterial_spot_original\",\n    \"Tomato__Early_blight\": \"Tomato___Early_blight_original\",\n    \"Tomato__Late_blight\": \"Tomato___Late_blight_original\",\n    \"Tomato__Leaf_Mold\": \"Tomato___Leaf_Mold_original\",\n    \"Tomato__Septoria_leaf_spot\": \"Tomato___Septoria_leaf_spot_original\",\n    \"Tomato__Spider_mites\": \"Tomato___Spider_mites_original\",\n    \"Tomato__Target_Spot\": \"Tomato___Target_Spot_original\",\n    \"Tomato__Tomato_mosaic_virus\": \"Tomato___Tomato_mosaic_virus_original\",  ",
        "detail": "mm",
        "documentation": {}
    },
    {
        "label": "app_mode",
        "kind": 5,
        "importPath": "mm",
        "description": "mm",
        "peekOfCode": "app_mode = st.sidebar.selectbox(\"Select Page\", [\"Home\", \"Disease Recognition\"])\n# Home Page\nif app_mode == \"Home\":\n    st.header(\"PLANT DISEASE RECOGNITION SYSTEM\")\n    image_path = \"Background image/images.jpeg\"  # Adjust path if necessary\n    st.image(image_path, caption=\"Uploaded Image\", use_container_width=True)\n    st.markdown(\"\"\"\n    Welcome to the Plant Disease Recognition System! 🌿🔍\n    ### How It Works\n    1. **Upload Image:** Go to the **Disease Recognition** page and upload an image of a plant with suspected diseases.",
        "detail": "mm",
        "documentation": {}
    }
]